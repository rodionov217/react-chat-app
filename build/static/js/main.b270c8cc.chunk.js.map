{"version":3,"sources":["actions/index.js","components/message-history/messages/Message.js","components/message-history/messages/Typing.js","components/message-history/index.js","components/members/index.js","components/modal/index.js","components/message-input/index.js","components/modal/Invite.js","components/chat-room/index.js","components/pages/chat/TabPanel.js","components/pages/chat/ChatTabs.js","components/pages/chat/Snackbar.js","components/modal/NewChat.js","components/pages/chat/index.js","components/pages/sign-in/SignInForm.js","components/pages/sign-in/index.js","App.js","index.js"],"names":["module","exports","USER_CONNECTED","USER_DISCONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","TYPING","VERIFY_USER","LOGOUT","NEW_CHAT","JOIN_CHAT","JOINED_CHAT","USER_JOINED","STREAM","Message","props","from","message","time","response","user","className","name","Typing","MessageHistory","list","typing","chatName","containerRef","useRef","useEffect","container","current","scrollTop","scrollHeight","ref","length","map","msg","i","key","chat","Members","split","part","join","toUpperCase","Modal","visible","setVisible","style","display","onClick","children","MessageInput","roomName","sendMessage","sendTyping","useState","messageValue","setMessageValue","isTyping","setIsTyping","onSubmit","event","preventDefault","userName","autoFocus","autoComplete","value","onChange","target","id","placeholder","rows","disabled","type","Invite","close","urlRef","link","focus","setSelectionRange","readOnly","navigator","clipboard","writeText","ChatRoom","room","showInviteModal","setShowInviteModal","showMembers","setShowMembers","htmlFor","fontSize","e","currentTarget","checked","Object","values","users","messages","TabPanel","index","Box","role","hidden","aria-labelledby","useStyles","makeStyles","tabs","borderTopLeftRadius","borderTopRightRadius","boxShadow","icon","cursor","color","alignSelf","transition","ChatTabs","currentRoom","setCurrentRoom","chats","openModal","classes","AppBar","position","Tabs","newValue","variant","scrollButtons","aria-label","Tab","label","aria-controls","theme","padding","spacing","SnackbarComponent","open","setOpen","notice","handleClose","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","action","IconButton","NewChat","createNewChat","joinChat","error","showJoinForm","setShowJoinForm","newChatName","setNewChatName","inviteValue","setInviteValue","Chat","socket","setChats","typingUsers","setTypingUsers","showNewChatModal","setShowNewChatModal","showNewUserNotice","setShowNewUserNotice","showUserLeftNotice","setShowUserLeftLotice","userToNotice","setUserToNotice","setError","removeAllListeners","on","connectedUsers","updateConnectedUsers","addChat","hadleJoinedChat","addMessage","updateUsersInPrivateChat","updateTypingUsers","newChats","typingUser","slice","find","el","push","filter","general","findIndex","updatedChats","emit","createdBy","chatId","SignInForm","setUserName","SignIn","setUser","handleUser","isTaken","io","console","log","App","logout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b270c8cc.chunk.js","sourcesContent":["module.exports = {\n  USER_CONNECTED: 'USER_CONNECTED',\n  USER_DISCONNECTED: 'USER_DISCONNECTED',\n  MESSAGE_RECIEVED: 'MESSAGE_RECIEVED',\n  MESSAGE_SENT: 'MESSAGE_SENT',\n  TYPING: 'TYPING',\n  VERIFY_USER: 'VERIFY_USER',\n  LOGOUT: 'LOGOUT',\n  NEW_CHAT: 'NEW_CHAT',\n  JOIN_CHAT: 'JOIN_CHAT',\n  JOINED_CHAT: 'JOINED_CHAT',\n  USER_JOINED: 'USER_JOINED',\n  STREAM: 'STREAM'\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Message = props => {\n  const { from, message, time, response, user} = props;\n  return (\n    <li className=\"message-container\">\n      <div className={`message-data ${response && 'align-right'}`}>\n        <span className=\"message-data-name\">{from === user.name ? 'Me' : from}</span>\n        <span className=\"message-data-time\">{time}</span>\n      </div>\n      <div className={`message ${!response ? \"my-message\" : \"other-message float-right\"}`}>\n        {message}\n      </div>\n    </li>\n  );\n}\n\nMessage.propTypes = {\n  from: PropTypes.string,\n  message: PropTypes.string,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number\n  }),\n  response: PropTypes.bool,\n  time: PropTypes.string\n}\n\n\nexport default Message;","import React from 'react';\n\nconst Typing = ({ from }) => {\n  return (\n      <div className=\"message-data\">\n        <span className=\"message-data-name\">{from.name} is typing...</span>\n      </div>\n  );\n}\n\nexport default Typing;","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Message from './messages/Message';\nimport Typing from './messages/Typing';\n\nconst MessageHistory = props => {\n  const {list, user, typing, chatName} = props;\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    container.scrollTop = container.scrollHeight;\n  });\n  \n  return (\n    <div ref={containerRef} className=\"chat-history\">\n      {list.length > 0 && \n        <ul>\n          {list.map((msg, i) => {\n            return <Message key={i} {...msg} response={msg.from !== user.name} user={user}/>\n          })}\n        </ul>}\n      {typing.length > 0 && \n      typing.map((user, i) => user.name === props.user.name || user.chat !== chatName ? null : <Typing key={i} from={user} />)}\n    </div>\n  )\n}\n\nMessageHistory.propTypes = {\n  list: PropTypes.array.isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number\n  }),\n  typing: PropTypes.array.isRequired,\n}\n\n\nexport default MessageHistory;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Members = ({list}) => {\n  return (\n    <ul className=\"list\">\n      {list.map((user, i) => {\n        return (\n          <li key={i} className=\"member\">\n            <div className=\"avatar\">{user.name.split(' ').map(part => part[0]).join('').toUpperCase()}</div>\n            <div className=\"about\">\n              <div className=\"name\">\n                {user.name}\n              </div>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  )\n}\n\nMembers.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number\n  })).isRequired\n}\n\n\nexport default Members;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Modal = props => {\n  const {visible, setVisible} = props;\n  return (\n    <div className=\"modal\" style={{display: visible ? 'flex' : 'none'}}>\n      <div onClick={() => setVisible(false)}  className=\"modal-overlay\"></div>\n      <div className=\"modal-notice\">\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nModal.propTypes = {\n  visible: PropTypes.bool,\n  setVisible: PropTypes.func,\n}\n\nexport default Modal;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst MessageInput = props => {\n  const {user, roomName, sendMessage, sendTyping} = props;\n  const [messageValue, setMessageValue] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleChange = event => {\n    if (!isTyping) {\n      setIsTyping(true);\n      sendTyping({chatName: roomName, userName: user.name, isTyping: true});\n    } else if ( isTyping && event.target.value === '') {\n      setIsTyping(false);\n      sendTyping({chatName: roomName, userName: user.name, isTyping: false});\n    }\n    setMessageValue(event.target.value);\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    sendMessage({chatName: roomName, message: messageValue, from: user.name} );\n    sendTyping({chatName: roomName, userName: user.name, isTyping: false});\n    setMessageValue('');\n    setIsTyping(false);\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"chat-message clearfix\">\n      <input autoFocus autoComplete=\"off\" value={messageValue} onChange={handleChange} name=\"message-to-send\" id=\"message-to-send\" placeholder =\"Type your message here...\" rows=\"3\"/>\n      <button disabled={messageValue === ''} type=\"submit\">Send</button>\n    </form>\n\n  )\n}\n\nMessageInput.propTypes = {\n  roomName: PropTypes.string,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number\n  }),\n  sendTyping: PropTypes.func,\n  sendMessage: PropTypes.func\n}\n\n\nexport default MessageInput;","import React, {useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nconst Invite = props => {\n  const { id, close } = props;\n  const urlRef = useRef(null);\n  const link = id ? id : 'https://serene-tor-99089.herokuapp.com/';\n  const copy = event => {\n    navigator.clipboard.writeText(link);\n    close();\n  }\n  useEffect(() => {\n    urlRef.current.focus();\n    urlRef.current.setSelectionRange(0, link.length);\n  });\n  return (\n    <div className=\"invite-modal\">\n      <h4>Copy and send this {id ? 'invite code' : 'link' } to your friends to this room</h4>\n      <input ref={urlRef} value={link} autoFocus readOnly/>\n      <button className=\"action-button\" onClick={copy} type=\"button\">Copy</button>\n    </div>\n  );\n};\n\nInvite.propTypes = {\n  id: PropTypes.string,\n  close: PropTypes.func,\n}\n\nexport default Invite;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MessageHistory from '../message-history';\nimport Members from '../members';\nimport Modal from '../modal';\nimport MessageInput from '../message-input';\nimport Invite from '../modal/Invite';\nimport PeopleIcon from '@material-ui/icons/People';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst ChatRoom = props => {\n  const {room, user, sendMessage, sendTyping, typing} = props;\n  const [showInviteModal, setShowInviteModal] = useState(true);\n  const [showMembers, setShowMembers] = useState(false);\n\n  return (\n    <div className=\"chat-container\">\n      <Modal visible={showInviteModal} setVisible={value => setShowInviteModal(value)} >\n        <Invite id={room.id} close={() => setShowInviteModal(false)}/>\n      </Modal>\n\n      <label htmlFor=\"users-switch\" className=\"users-button\">\n        {showMembers ? \n          <CloseIcon fontSize=\"large\"/> : \n          <PeopleIcon fontSize=\"large\"/>}\n      </label>\n      <input value={showMembers} onChange={e => setShowMembers(e.currentTarget.checked)} className=\"users-switch\" type=\"checkbox\" id=\"users-switch\"/>\n        \n      <div className=\"people-list\" id=\"people-list\">\n        <button type=\"button\" onClick={() => setShowInviteModal(true)}>Invite Friends</button>\n        <Members list={Object.values(room.users)}/>\n      </div>\n\n      <div className=\"chat\">\n        <MessageHistory \n          list={room.messages} \n          user={user}\n          typing={typing}\n          chatName={room.name}\n        />\n        <MessageInput \n          user={user} \n          roomName={room.name} \n          sendMessage={sendMessage}\n          sendTyping={sendTyping}\n        />\n      </div>\n\n    </div>\n  );\n}\n\nChatRoom.propTypes = {\n  room: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n  sendMessage: PropTypes.func,\n  sendtyping: PropTypes.func,\n  typing: PropTypes.array.isRequired,\n}\n\nexport default ChatRoom;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\n\nconst TabPanel = props => {\n  const { value, index } = props;\n\n  return (\n    <Box \n      className={props.className}\n      role=\"tabpanel\" \n      hidden={value !== index} \n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n    >\n      {props.children}\n    </Box>\n  );\n}\n\nTabPanel.propTypes = {\n  value: PropTypes.number,\n  index: PropTypes.number,\n  className: PropTypes.string\n}\n\nexport default TabPanel;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { AppBar, Tabs, Tab } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    borderTopLeftRadius: '5px',\n    borderTopRightRadius: '5px',\n    boxShadow: 'none',\n  },\n  icon: {\n    cursor: 'pointer',\n    color: '#86BB71',\n    alignSelf: 'center',\n    transition: 'all ease-out 0.5s',\n    '&:hover': {\n      color: 'red'\n    }\n  }\n}));\nconst ChatTabs = props => {\n  const {currentRoom, setCurrentRoom, chats, openModal} = props;\n  const classes = useStyles();\n  return (\n    <AppBar className={classes.tabs} position=\"static\" color=\"default\">\n      <Tabs \n        value={currentRoom}\n        onChange={(event, newValue) => setCurrentRoom(newValue)}\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        aria-label=\"scrollable auto tabs example\">\n        {\n          chats.map((room, i) => <Tab key={i} label={room.name} id={`scrollable-auto-tab-${i}`}  aria-controls={`scrollable-auto-tabpanel-${i}`}/>)\n        }\n        <AddCircleIcon className={classes.icon} onClick={openModal}/>\n      </Tabs>\n    </AppBar>\n  );\n};\n\nChatTabs.propTypes = {\n  currentRoom: PropTypes.number.isRequired,\n  setCurrentRoom: PropTypes.func,\n  chats: PropTypes.array.isRequired,\n  openModal: PropTypes.func,\n}\n\nexport default ChatTabs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles(theme => ({\n  close: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\nconst SnackbarComponent = props => {\n  const classes = useStyles();\n  const {open, setOpen, user, notice} = props;\n  const message = user + notice;\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        open={open}\n        autoHideDuration={4000}\n        onClose={handleClose}\n        ContentProps={{\n          'aria-describedby': 'message-id',\n        }}\n        message={<span id=\"message-id\">{message}</span>}\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            className={classes.close}\n            onClick={handleClose}\n          >\n            <CloseIcon />\n          </IconButton>,\n        ]}\n      />\n    </div>\n  );\n}\n\nSnackbarComponent.propTypes = {\n  open: PropTypes.bool,\n  setOpen: PropTypes.func,\n  user: PropTypes.string,\n  notice: PropTypes.string,\n}\n\n\nexport {SnackbarComponent as Snackbar}","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nconst NewChat = ({createNewChat, joinChat, error}) => {\n  const [showJoinForm, setShowJoinForm] = useState(true);\n  const [newChatName, setNewChatName] = useState('');\n  const [inviteValue, setInviteValue] = useState('');\n  const incorrectMessage = \"Too long for a chat name. Try something shorter than 10 symbols.\";\n\n  const handleJoin = event => {\n    event.preventDefault();\n    joinChat(inviteValue);\n    setInviteValue('');\n  }\n\n  const handleCreate = event => {\n    event.preventDefault();\n    createNewChat(newChatName);\n    setNewChatName('');\n  }\n  \n  return (\n    <div className=\"new-chat-modal\">\n      <form onSubmit={handleJoin} className=\"new-chat-form\" style={{display: showJoinForm ? 'flex' : 'none'}}>\n        <label>\n          Do you have an invite code?\n          <br/>\n          Paste it in here to join the room\n        </label>\n        <input autoFocus value={inviteValue} onChange={e => setInviteValue(e.target.value)} type=\"text\" placeholder=\"e.g. 1111-a22222-c333333\"/>\n        <output>{inviteValue === '' ? '' : error}</output>\n        <button disabled={inviteValue === ''} type=\"submit\" className=\"action-button\">Join</button>\n        or\n        <button className=\"switch-button\" type=\"button\" onClick={() => setShowJoinForm(false)}>Create New Room</button>\n      </form>\n\n      <form style={{display: showJoinForm ? 'none' : 'flex'}} className=\"new-chat-form\" onSubmit={handleCreate} >\n        <label>Enter the new chat name:</label>\n        <input value={newChatName} onChange={e => setNewChatName(e.target.value)} type=\"text\" placeholder=\"chat name\"/>\n        <output>{newChatName.length > 10 ? incorrectMessage : ''}</output>\n        <button disabled={newChatName === ''} type=\"submit\" className=\"action-button\">Create</button>\n        or\n        <button className=\"switch-button\" type=\"button\" onClick={() => setShowJoinForm(true)}>\n          <span><ArrowBackIcon fontSize=\"large\"/></span>\n          Go back to join existing room\n          </button>\n      </form>\n    </div>\n  )\n};\n\nNewChat.propTypes = {\n  joinChat: PropTypes.func,\n  createNewChat: PropTypes.func,\n  error: PropTypes.string\n}\n\nexport default NewChat;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { MESSAGE_SENT, MESSAGE_RECIEVED, TYPING, NEW_CHAT, USER_CONNECTED, USER_DISCONNECTED, JOIN_CHAT, JOINED_CHAT, USER_JOINED } from '../../../actions/index';\n\nimport ChatRoom from '../../chat-room';\nimport TabPanel from './TabPanel';\nimport ChatTabs from './ChatTabs';\nimport Modal from '../../modal';\nimport { Snackbar } from './Snackbar';\nimport NewChat from '../../modal/NewChat';\n//import Video from '../../video';\n\nconst Chat = props => {\n  const { user, socket } = props;\n\n  //LOCAL STATE\n  const [currentRoom, setCurrentRoom] = useState(0);\n  const [chats, setChats] = useState([{name: 'General', users: {}, messages: []}]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [showNewChatModal, setShowNewChatModal] = useState(false);\n  const [showNewUserNotice, setShowNewUserNotice] = useState(false);\n  const [showUserLeftNotice, setShowUserLeftLotice] = useState(false);\n  const [userToNotice, setUserToNotice] = useState('');\n  const [error, setError] = useState('');\n  \n  \n  useEffect(() => {\n    socket.removeAllListeners();\n\n    socket.on(USER_CONNECTED, ({connectedUsers, user}) => {\n      setShowNewUserNotice(true);\n      setUserToNotice(user.name);\n      updateConnectedUsers(connectedUsers);\n    });\n\n    socket.on(USER_DISCONNECTED, ({connectedUsers, user}) => {\n      setShowUserLeftLotice(true);\n      setUserToNotice(user);\n      updateConnectedUsers(connectedUsers); \n    });\n\n    socket.on(NEW_CHAT, chat => addChat(chat, false));\n\n    socket.on(JOINED_CHAT, chat => hadleJoinedChat(chat));\n\n    socket.on(MESSAGE_RECIEVED, msg => addMessage(msg));\n\n    socket.on(USER_JOINED, (room, user) => updateUsersInPrivateChat(room, user));\n    \n  // eslint-disable-next-line\n  }, [chats]);\n\n  useEffect(() => {\n    socket.on(TYPING, ({chatName, userName, isTyping}) =>  updateTypingUsers({name: userName, chat: chatName}, isTyping ));\n  });\n\n  //Adds chat to chat container. If reset is true, removes all chats and sets that chat to the main chat. Sets the message and typing socket events for the chat.\n  //@param chat {Object} Chat object\n  //@param reset {boolean} if true, will set the chat as the only chat\n  const addChat = (chat) => {\n    const newChats = [...chats, chat];\n    setChats(newChats);\n  }\n    \n//updateTypingUsers({name: userName, chat: chatName}, isTyping ));\n//Updates the list of users typing at the moment in different chats\n//@param typingUSer {Object} a user object with two properties: name and chat\n//@param isTyping {bool} true is the user is typing\n  const updateTypingUsers = (typingUser, isTyping) => {\n    let list = typingUsers.slice();;\n    if (isTyping) {\n      if (!typingUsers.find(el => el.name === typingUser.name && el.chat === typingUser.chat)) {\n      list.push(typingUser);\n      setTypingUsers(list);\n      }\n    } else {\n      list = list.filter(el => el.name !== typingUser.name && el.chat !== typingUser.chat) ;\n      setTypingUsers(list);\n    }\n  }\n\n  //Updates the list of all the users connected to the general chat\n  //@param users {array} the list of connected users\n  const updateConnectedUsers = users => {\n    const general = chats.findIndex(el => el.name === 'General');\n    const updatedChats = chats.slice();\n    updatedChats[general].users = users;\n    setChats(updatedChats);\n  }\n\n  //Updates the list of user in the chat passed in\n  //@param room {Object} the chat to update\n  //@param user {Object} the joined user\n  const updateUsersInPrivateChat = (room, user) => {\n    const updatedChats = chats.slice();\n    const chat = updatedChats.findIndex(el => el.name === room.name);\n    if (chat !== -1) {\n      updatedChats[chat].users = room.users;\n      setChats(updatedChats);\n    }\n  }\n\n  //Adds the message passed in to chat with the name passed in\n  //@param message {Object}\n  const addMessage = message => {\n    let newChats = chats.map(chat => {\n      if (message.chatName === chat.name) {\n        chat.messages.push(message);\n        return chat;\n      } \n      return chat;\n    });\n    setChats(newChats);\n  }\n\n  //Handles the 'Send' button submit event. Sends the new message to the server\n  const sendMessage = ({chatName, message, from}) => socket.emit(MESSAGE_SENT, {chatName, message, from});\n\n  //Handles the message input change event. Send message to the server that the user is typing or has stopped typing\n  const sendTyping = ({chatName, userName, isTyping}) => socket.emit(TYPING, {chatName, userName, isTyping});\n\n  //Creates a new chat room with the name passed in. Sends a message to the server with the information about the new chat room\n  //@param chatName {String} the name of the new chat\n  const createNewChat = chatName => {\n    setShowNewChatModal(false);\n    setCurrentRoom(currentRoom+1);\n    socket.emit(NEW_CHAT, {chatName, createdBy: user});\n  }\n\n  //Handles the 'Join' button submit event. Sends a message to the server with the id of the chat which the user wants to join.\n  //@param chatId {String} the id of the chat to join\n  const joinChat = chatId => {\n    socket.emit(JOIN_CHAT, {chatId, user});\n  }\n\n  //Handles the 'Joined Chat' server event. If param chat is not null, adds the chat to the list of chats. Closes the modals and opens the tab with the new chat.\n  //@param chat {Object} the object of the chat. Null if the chat was not found.\n  const hadleJoinedChat = chat => {\n    if (chat) {\n      addChat(chat, false);\n      setShowNewChatModal(false);\n      setCurrentRoom(currentRoom+1);\n    } else {\n      setError('Sorry, this chat does not exist :(');\n    }\n  } \n\n  return (\n    <div className=\"wrapper\">\n      <Snackbar user={userToNotice} notice=\" has connected\" open={showNewUserNotice} setOpen={setShowNewUserNotice}/>\n      <Snackbar user={userToNotice} notice=\" has disconnected\" open={showUserLeftNotice} setOpen={setShowUserLeftLotice}/>\n      <Modal\n        visible={showNewChatModal}\n        setVisible={setShowNewChatModal}>\n        <NewChat createNewChat={createNewChat} joinChat={joinChat} error={error}/>\n      </Modal>\n      <ChatTabs \n        currentRoom={currentRoom}\n        setCurrentRoom={setCurrentRoom}\n        chats={chats}\n        openModal={() => setShowNewChatModal(true)}\n      />\n      {\n        chats.map((room, i) => (\n          <TabPanel key={i} value={currentRoom} index={i}>\n            {/* <Video \n              room={room} \n              user={user}\n              socket={socket}/> */}\n            <ChatRoom \n              room={room} \n              user={user}\n              sendMessage={sendMessage}\n              sendTyping={sendTyping}\n              typing={typingUsers}\n            />\n          </TabPanel>\n          )\n        )\n      }\n    </div>\n  )\n}\n\nChat.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number\n  }).isRequired,\n  socket: PropTypes.object.isRequired\n}\n\nexport default Chat;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SignInForm = ({userName, setUserName, onSubmit, error}) => {\n  const notice = \"It's too long:( Try something shorter than 15 symbols\";\n  return (\n    <form onSubmit={onSubmit} className=\"sign-in-form container\">\n      <label>Enter your name to start</label>\n      <input autoFocus type=\"text\" placeholder=\"Name\" value={userName} onChange={event => setUserName(event.target.value)}/>\n      <output>{userName.length > 15 ? notice : error}</output>\n      <button disabled={userName === ''} type=\"submit\">Start Chatting</button>\n    </form>\n  )\n}\n\nSignInForm.propTypes = {\n  userName: PropTypes.string,\n  setUserName: PropTypes.func,\n  onSubmit: PropTypes.func,\n  error: PropTypes.string\n}\n\nexport default SignInForm;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport SignInForm from './SignInForm';\nimport { VERIFY_USER } from '../../../actions';\n\nconst SignIn = props => {\n  const {setUser, socket} = props;\n  const [userName, setUserName] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (userName.length > 15) {\n      return;\n    }\n    socket.emit(VERIFY_USER, userName, handleUser);\n  }\n\n  const handleUser = ({user, isTaken}) => {\n    if (isTaken) {\n      setError('Sorry, this name is taken :(');\n    } else {\n      setError('');\n      setUser(user);\n    }\n  }\n  return (\n    <section>\n      <SignInForm userName={userName} setUserName={setUserName} onSubmit={handleSubmit} error={error}/>\n    </section>\n  )\n}\n\nSignIn.propTypes = {\n  setUser: PropTypes.func,\n  socket: PropTypes.object.isRequired\n}\n\nexport default SignIn;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Chat from './components/pages/chat';\nimport SignIn from './components/pages/sign-in';\nimport { USER_CONNECTED, LOGOUT } from './actions/index';\nimport io from 'socket.io-client';\n\nconst socketUrl = \"/\";\n//const socketUrl = \"http://localhost:3001/\";\nconst socket = io(socketUrl);\nsocket.on('connect', () => console.log('connected!'));\n\nconst App = () => {\n  const [user, setUser] = useState(null);\n\n  //Handles the SignIn form submit event. Sets up the new user object.\n  /* @param user {id:number, name:string} */\n  const setNewUser = user => {\n    socket.emit(USER_CONNECTED, user);\n    setUser(user);\n  }\n\n  const logout = () => {\n    socket.emit(LOGOUT, user);\n    setUser(null);\n  }\n\n  useEffect(() => {\n    return () => {\n      logout(user)\n    }\n  // eslint-disable-next-line\n  }, []);\n\n  return !user ? \n    <SignIn setUser={setNewUser} socket={socket}/> : \n    <Chat user={user} socket={socket} logout={logout}/>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root'));\n\n"],"sourceRoot":""}